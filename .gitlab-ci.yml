stages:
  - check
  - build
  - test
  - deploy

# Check stage

lint_node:
  image: node:23-alpine
  stage: check
  script:
    - cd src/web
    - npm install
    - npm run lint

lint_go:
  image: golang:1.24-alpine
  stage: check
  script:
    - cd src/goformail
    - wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v1.64.8
    - ./bin/golangci-lint run --out-format tab

vulncheck_go:
  image: golang:1.24-alpine
  stage: check
  script:
    - cd src/goformail
    - go install golang.org/x/vuln/cmd/govulncheck@latest
    - govulncheck ./...

# Build stage

build_node:
  image: node:23-alpine
  stage: build
  script:
    - cd src/web
    - npm install
    - npm run build
  artifacts:
    paths:
      - src/web/out/*

build_go:
  image: golang:1.24-alpine
  stage: build
  script:
    - cd src/goformail
    - rm -r ./internal/interfaces/out
    - cp -r ../web/out ./internal/interfaces/out
    - go build ./cmd/goformail
  needs:
    - build_node
  artifacts:
    paths:
      - src/goformail/goformail

# Test stage

test_node:
  image: node:23-alpine
  stage: test
  script:
    - cd src/web
    - npm install
    - npm run test

test_go:
  image: golang:1.24-alpine
  stage: test
  script:
    - cd src/goformail
    - go test ./...

# Deploy stage

deploy:
  image: docker:20.10.16
  stage: deploy
  services:
    - docker:20.10.16-dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    LATEST_TAG: $CI_REGISTRY_IMAGE:latest
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin
    - docker build -t $IMAGE_TAG -t $LATEST_TAG .
    - docker push $IMAGE_TAG

